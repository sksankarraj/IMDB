@model IMDB.Models.MovieVM

@{
    ViewBag.Title = "New Movie";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/new.js" type="text/javascript">
</script>

<div class="new-cont">


    <div class="form-horizontal">
        <h3 class="form-header">New Movie</h3>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", id = "txtMName" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Plot, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.TextAreaFor(model => model.Plot, new { htmlAttributes = new { @class = "form-control", @maxlength = "500" } })
                        @Html.ValidationMessageFor(model => model.Plot, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Poster, htmlAttributes: new { @class = "control-label" })
                    <div>
                        <input type="file" onchange="return fileCheck(this);" id="Poster" accept=".jpg, .png, .gif, .jpeg" />
                        @Html.ValidationMessageFor(model => model.Poster, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProducerID, "Producer", htmlAttributes: new { @class = "control-label" })

                    <div>
                        @Html.DropDownList("ProducerID", ViewData["Producers"] as IEnumerable<SelectListItem>, "Select Producer", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProducerID, "", new { @class = "text-danger" })
                        <div title="Add new Producer" onclick="addProd()" class="new-item">+</div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ActorList, "Actors", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.DropDownList("ActorList", ViewData["Actors"] as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control", multiple = "multiple" })
                        @Html.ValidationMessageFor(model => model.ActorList, "", new { @class = "text-danger" })

                        <div title="Add new Actor" onclick="addAct()" class="new-item">+</div>
                    </div>
                </div>
                <hr class="hr-line" />
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" id="NewMovie" value="Create" class="btn" />
                    </div>
                    <div>
                        <a class="back-btn" href="/">Back to List</a>
                    </div>
                </div>
            </div>
        }
    </div>
    <div id="AddActor"></div>
    <div id="AddProducer"></div>
    <div>

    </div>
</div>
